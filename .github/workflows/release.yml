name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write
  packages: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get version
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi


    - name: Create Release
      id: create_release
      run: |
        if [[ "${{ steps.get_version.outputs.version }}" == *"alpha"* ]] || [[ "${{ steps.get_version.outputs.version }}" == *"beta"* ]] || [[ "${{ steps.get_version.outputs.version }}" == *"rc"* ]]; then
          PRERELEASE_FLAG="--prerelease"
        else
          PRERELEASE_FLAG=""
        fi
        
        gh release create ${{ steps.get_version.outputs.version }} \
          --title "Snake Game ${{ steps.get_version.outputs.version }}" \
          --notes "## Snake Game ${{ steps.get_version.outputs.version }}
          
          ðŸ“‹ **For detailed changes, see the [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md)**
          
          ### Downloads
          Choose the appropriate binary for your platform:
          - **Windows**: \`create-rust-snake-game.exe\`
          - **macOS (Intel)**: \`create-rust-snake-game-x86_64-apple-darwin\`
          - **macOS (Apple Silicon)**: \`create-rust-snake-game-aarch64-apple-darwin\`
          - **Linux**: \`create-rust-snake-game-x86_64-unknown-linux-gnu\`
          
          ### Installation
          1. Download the binary for your platform
          2. Make it executable (Linux/macOS): \`chmod +x create-rust-snake-game-*\`
          3. Run: \`./create-rust-snake-game-*\` (or double-click on Windows)
          
          ### Controls
          - **Arrow Keys**: Move the snake
          - **ESC**: Quit the game
          - **R**: Restart the game
          
          ### Performance
          This release includes comprehensive performance optimizations and has been tested with:
          - Unit tests: âœ… All passing
          - Integration tests: âœ… All passing
          - Property-based tests: âœ… All passing
          - Performance benchmarks: âœ… No regressions" \
          $PRERELEASE_FLAG
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-upload:
    name: Build and Upload ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    needs: create-release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: create-rust-snake-game-x86_64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: create-rust-snake-game.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: create-rust-snake-game-x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: create-rust-snake-game-aarch64-apple-darwin

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install system dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libasound2-dev libudev-dev libx11-dev libxrandr-dev libxi-dev libgl1-mesa-dev libxcursor-dev libxinerama-dev


    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        target: ${{ matrix.target }}

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.target }}-release-${{ hashFiles('**/Cargo.lock') }}

    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Strip binary (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: strip target/${{ matrix.target }}/release/create-rust-snake-game

    - name: Upload to Release
      shell: bash
      run: |
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          gh release upload ${{ needs.create-release.outputs.version }} target/${{ matrix.target }}/release/create-rust-snake-game.exe --clobber
        else
          gh release upload ${{ needs.create-release.outputs.version }} target/${{ matrix.target }}/release/create-rust-snake-game --clobber
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-cargo-toml:
    name: Update Cargo.toml Version and CHANGELOG
    runs-on: ubuntu-latest
    needs: create-release
    if: github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        ref: main

    - name: Get default branch
      id: get_branch
      run: |
        # Try to get the default branch from the repository
        DEFAULT_BRANCH=$(gh repo view --json defaultBranchRef --jq '.defaultBranchRef.name' || echo "main")
        echo "branch=$DEFAULT_BRANCH" >> $GITHUB_OUTPUT
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Checkout default branch
      run: |
        git checkout ${{ steps.get_branch.outputs.branch }}
        git pull origin ${{ steps.get_branch.outputs.branch }}

    - name: Install git-cliff
      run: |
        # Download git-cliff using the direct release URL
        curl -L -o git-cliff.tar.gz https://github.com/orhun/git-cliff/releases/download/v2.10.0/git-cliff-2.10.0-x86_64-unknown-linux-gnu.tar.gz
        tar -xzf git-cliff.tar.gz
        # Find the git-cliff binary in the extracted directory
        find . -name "git-cliff" -type f -executable | head -1 | xargs -I {} sudo mv {} /usr/local/bin/
        rm -rf git-cliff-* git-cliff.tar.gz

    - name: Update CHANGELOG.md with git-cliff
      run: |
        # Generate the full changelog using git-cliff
        git-cliff --output CHANGELOG.md
        echo "Updated CHANGELOG.md with git-cliff"

    - name: Update version in Cargo.toml
      run: |
        VERSION="${{ needs.create-release.outputs.version }}"
        # Remove 'v' prefix if present
        VERSION=${VERSION#v}
        sed -i "s/^version = \".*\"/version = \"$VERSION\"/" Cargo.toml

    - name: Regenerate Cargo.lock
      run: |
        # Install Rust to ensure we can run cargo commands
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
        source ~/.cargo/env
        # Regenerate Cargo.lock to ensure it's in sync with Cargo.toml
        cargo update

    - name: Commit and push version update
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add Cargo.toml Cargo.lock CHANGELOG.md
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Bump version to ${{ needs.create-release.outputs.version }} and update CHANGELOG.md"
          git push origin ${{ steps.get_branch.outputs.branch }}
        fi
