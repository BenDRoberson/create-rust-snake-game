name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write
  packages: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get version
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Create Release
      id: create_release
      run: |
        if [[ "${{ steps.get_version.outputs.version }}" == *"alpha"* ]] || [[ "${{ steps.get_version.outputs.version }}" == *"beta"* ]] || [[ "${{ steps.get_version.outputs.version }}" == *"rc"* ]]; then
          PRERELEASE_FLAG="--prerelease"
        else
          PRERELEASE_FLAG=""
        fi
        
        gh release create ${{ steps.get_version.outputs.version }} \
          --title "Snake Game ${{ steps.get_version.outputs.version }}" \
          --notes "## Snake Game ${{ steps.get_version.outputs.version }}
          
          ### What's New
          - Bug fixes and improvements
          - Performance optimizations
          
          ### Downloads
          Choose the appropriate binary for your platform:
          - **Windows**: \`create-rust-snake-game.exe\`
          - **macOS (Intel)**: \`create-rust-snake-game-x86_64-apple-darwin\`
          - **macOS (Apple Silicon)**: \`create-rust-snake-game-aarch64-apple-darwin\`
          - **Linux**: \`create-rust-snake-game-x86_64-unknown-linux-gnu\`
          
          ### Installation
          1. Download the binary for your platform
          2. Make it executable (Linux/macOS): \`chmod +x create-rust-snake-game-*\`
          3. Run: \`./create-rust-snake-game-*\` (or double-click on Windows)
          
          ### Controls
          - **Arrow Keys**: Move the snake
          - **ESC**: Quit the game
          - **R**: Restart the game
          
          ### Performance
          This release includes comprehensive performance optimizations and has been tested with:
          - Unit tests: ✅ All passing
          - Integration tests: ✅ All passing
          - Property-based tests: ✅ All passing
          - Performance benchmarks: ✅ No regressions" \
          $PRERELEASE_FLAG
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-upload:
    name: Build and Upload ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    needs: create-release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: create-rust-snake-game-x86_64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: create-rust-snake-game.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: create-rust-snake-game-x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: create-rust-snake-game-aarch64-apple-darwin

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        target: ${{ matrix.target }}

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.target }}-release-${{ hashFiles('**/Cargo.lock') }}

    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Strip binary (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: strip target/${{ matrix.target }}/release/create-rust-snake-game

    - name: Upload to Release
      run: |
        gh release upload ${{ needs.create-release.outputs.version }} \
          target/${{ matrix.target }}/release/create-rust-snake-game${{ matrix.target == 'x86_64-pc-windows-msvc' && '.exe' || '' }} \
          --clobber
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-cargo-toml:
    name: Update Cargo.toml Version
    runs-on: ubuntu-latest
    needs: create-release
    if: github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Update version in Cargo.toml
      run: |
        VERSION="${{ needs.create-release.outputs.version }}"
        # Remove 'v' prefix if present
        VERSION=${VERSION#v}
        sed -i "s/^version = \".*\"/version = \"$VERSION\"/" Cargo.toml

    - name: Commit and push version update
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add Cargo.toml
        git commit -m "Bump version to ${{ needs.create-release.outputs.version }}" || exit 0
        git push
